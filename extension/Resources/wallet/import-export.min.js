function _ImportExport(){function f(){var o={};document.body.addEventListener("ExtensionResponse",function(){var r=JSON.parse(document.body.getAttribute("data-extension-response"));document.body.removeAttribute("data-extension-response");document.body.removeAttribute("data-extension-request");if(r.cmd=="call"){var s=r.data.request_id;if(!o[s]){throw"Unknown Request ID "+o[s]}if(r.data.status==200||r.data.status==500){if(!r.data.response){o[s].error("Server Returned Empty Response")}else{try{var p=JSON.parse(r.data.response)}catch(q){return o[s].success(r.data.response)}if(p.error){o[s].error(p.error.message)}else{o[s].success(p.result)}}}else{if(r.data.status==401){o[s].error("Authorization Failed Please Check Your Username & Password")}else{o[s].error("Server Returned Unknown status "+r.data.status)}}}});function m(q){var p=document.createEvent("Event");p.initEvent("ExtensionRequest",true,true);var r=""+Math.floor((Math.random()*10000)+1);o[r]={success:q.success,error:q.error};q.data.request_id=r;document.body.setAttribute("data-extension-request",JSON.stringify(q));document.body.dispatchEvent(p)}var n={settings:{rpcuser:"username",rpcpass:"password",rpcport:"8332",rpcssl:false,rpcserver:"localhost"},url:function(){var p=this;var q=p.settings.rpcssl?"https://":"http://";return q+p.settings.rpcserver+":"+p.settings.rpcport+"/"},call:function(s,r,q,p){m({cmd:"call",success:q,error:p,data:{url:n.url(),method:"POST",username:n.settings.rpcuser,password:n.settings.rpcpass,data:JSON.stringify({method:s,params:r,id:s})}})}};this.checkForExtension=function(r,p){var q=setTimeout(p,2000);m({cmd:"call",success:function(){clearTimeout(q);r()},error:function(){clearTimeout(q);p()},data:{url:"https://blockchain.info/ping",method:"POST",data:""}})};function j(q,p){MyWallet.setLoadingText("Importing private key Bitcoind");n.call("validateaddress",[q],function(r){if(r.ismine){n.call("dumpprivkey",[q],function(s){MyWallet.getSecondPassword(function(){a(s,p,l)})},function(s){MyWallet.makeNotice("error","misc-error",s)})}else{if(r.isvalid&&p){MyWallet.makeNotice("success","misc-success","Added Address book entry");if(p&&p.length>0){MyWallet.addAddressBookEntry(q,p)}}}})}function k(p,q){MyWallet.getSecondPassword(function(){if(!MyWallet.addressExists(p)){return}var r=MyWallet.base58ToSipa(MyWallet.getPrivateKey(p),p);if(r==null){return}if(q==null){q=""}MyWallet.makeNotice("success","misc-success","Exported Private key. Your Bitcoin Client may become un-responsive while the blockchain is re-scanned.",20000);n.call("importprivkey",[r,q],function(){},function(s){MyWallet.makeNotice("error","misc-error",s)})})}function l(){var q=$("#sync-bitcoind");var r=q.find(".rpc-address-table");r.hide();var p=r.find("tbody").empty();MyWallet.setLoadingText("Fetching Address List from Bitcoind");n.call("listreceivedbyaddress",[0,true],function(v){r.show(200);p.empty();var x=[];for(var w in v){x.push(v[w].address)}var y=function(G){p.find(".bitcoind").remove();for(var D in v){var C=v[D];var F='<a href="#" class="act-import">Import</a>';if(MyWallet.addressExists(C.address)&&!MyWallet.isWatchOnly(C.address)){F="Already Exists"}var E=$('<tr class="bitcoind"><td>'+C.address+"</td><td>"+C.account+"</td><td>"+(G[C.address]?formatBTC(G[C.address].final_balance)+" BTC":"Unknown")+"</td><td>"+F+"</td></tr>");(function(H){E.find(".act-import").click(function(){j(H.address,H.account)})})(C);if(MyWallet.getAddressBalance(C.address)>0){p.prepend()}else{p.append(E)}}};BlockchainAPI.get_balances(x,y,function(C){MyWallet.makeNotice("error","misc-error",C);y({})});var u=MyWallet.getAllAddresses();for(var w in u){var B=u[w];var A=false;for(var w in x){if(x[w]==B){A=true}}if(A){continue}var z=MyWallet.getAddressLabel(B);var s=MyWallet.getAddressBalance(B);var t=' <a href="#" onclick="jsonRPCExport(\''+B+"', '"+z+"')\">Export</a>";p.prepend("<tr><td>"+B+"</td><td>"+(z?z:"")+"</td><td>"+formatBTC(s)+" BTC </td><td>"+t+"</td></tr>")}},function(s){MyWallet.makeNotice("error","misc-error",s)})}this.syncWallet=function(q){var p=$("#sync-bitcoind");n.settings.rpcuser=p.find('input[name="rpc-user"]').val();n.settings.rpcpass=p.find('input[name="rpc-pass"]').val();n.settings.rpcport=parseInt(p.find('input[name="rpc-port"]').val());n.settings.rpcssl=p.find('input[name="rpc-ssl"]').is(":checked");var r=p.find('input[name="wallet-pass"]').val();if(!n.settings.rpcuser||!n.settings.rpcpass||n.settings.rpcuser.length==0||n.settings.rpcpass.length==0||n.settings.rpcport.length<=0){return}if(r&&r.length>0){n.call("walletpassphrase",[r,600],function(){if(q){q()}l()},function(s){MyWallet.makeNotice("error","misc-error",s)})}else{n.call("getinfo",[],function(){if(q){q()}l()},function(s){MyWallet.makeNotice("error","misc-error",s)})}}}this.init=function(j,l,k){MyWallet.setLoadingText("Loading Import Export View");if(!j.is(":empty")){d();l();return}$.ajax({type:"GET",url:root+"wallet/import-export-template",data:{format:"plain"},success:function(m){try{j.html(m);d();l()}catch(n){console.log(n);k()}},error:function(){MyWallet.makeNotice("error","misc-error","Error Downloading Account Settings Template");k()}})};function e(j,l){var k=$("#watch-only-modal");k.modal({keyboard:true,backdrop:"static",show:true});k.center();k.find(".address").text(j);k.find(".btn.btn-secondary").unbind().click(function(){k.modal("hide")});k.find(".btn.btn-primary").unbind().click(function(){l();k.modal("hide")})}function d(){$('a[data-toggle="tab"]').unbind().on("show",function(j){$(j.target.hash).trigger("show")});$("#sync-bitcoind").on("show",function(){var j=new f();$("#rpc-step-1").hide();$("#rpc-step-2").hide();$("#rpc-body").hide();j.checkForExtension(function(k){$("#rpc-step-2").show(200);j.syncWallet(function(){$("#rpc-step-2").hide();$("#rpc-body").show()})},function(k){$("#rpc-step-1").show(200)});$("#sync-bitcoind-btn").unbind().click(function(){j.syncWallet()});$("#rpc-continue-btn").unbind().click(function(){$("#rpc-step-2").hide();$("#rpc-body").show(200)})});$("#import-json-btn").unbind().click(function(){$(this).attr("disabled",true);h($("#import-json"));$(this).attr("disabled",false)});$("#import-address-btn").unbind().click(function(){var k=$.trim($("#import-address-address").val());if(k.length=0){MyWallet.makeNotice("error","misc-error","You must enter an address to import");return}try{var j=new Bitcoin.Address(k);if(j.toString()!=k){throw"Inconsistency between addresses"}$("#import-address-address").val("");e(k,function(){try{if(MyWallet.addWatchOnlyAddress(k)){MyWallet.makeNotice("success","added-address","Successfully Added Address "+j);try{ws.send('{"op":"addr_sub", "addr":"'+j+'"}')}catch(m){}MyWallet.backupWallet("update",function(){MyWallet.get_history()})}else{throw"Wallet Full Or Addresses Exists"}}catch(m){MyWallet.makeNotice("error","misc-error",m)}})}catch(l){MyWallet.makeNotice("error","misc-error","Error importing address: "+l);return}});$("#import-private-scan").unbind().click(function(){MyWallet.getSecondPassword(function(){loadScript("wallet/signer.min.js",function(){showPrivateKeyModal(function(j){if(MyWallet.addPrivateKey(j)){MyWallet.backupWallet("update",function(){MyWallet.get_history()});MyWallet.makeNotice("success","added-address","Imported Bitcoin Address "+j.getBitcoinAddress())}else{throw"Unable to add private key for bitcoin address "+j.getBitcoinAddress()}},function(j){MyWallet.makeNotice("error","misc-error",j)},"Any Private Key")})})});$("#import-private-btn").unbind().click(function(){var j=$("#import-private-key");try{a($.trim(j.val()))}catch(k){MyWallet.makeNotice("error","misc-error","Error importing private key: "+k)}j.val("")});$("#import-brain-wallet-btn").unbind().click(function(){var l=$("#import-brain-wallet");var j=$.trim(l.val());if(j.length<15){MyWallet.makeNotice("error","misc-error","The passphrase must be at least 15 characters long");return}var k=Crypto.SHA256(j,{asBytes:true});try{a(Bitcoin.Base58.encode(k),"Brain Wallet")}catch(m){MyWallet.makeNotice("error","misc-error","Error importing private key: "+m)}l.val("")});$("#export-priv-format").change(function(j){$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))});$("#export-crypted").on("show",function(){$("#json-crypted-export").val(MyWallet.getEncryptedWalletData())});$("#export-unencrypted").on("show",function(){MyWallet.getSecondPassword(function(){$("#export-priv-format").val("base58");$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))})});$("#import-backup").on("show",function(){var j=this;i($(j))});$("#export-paper-btn").click(function(){MyWallet.getSecondPassword(function(){var j=window.open(null,null,"width=700,height=800,toolbar=1");loadScript("wallet/jquery.qrcode.min.js",function(){try{if(j==null){MyWallet.makeNotice("error","misc-error","Failed to open popup window");return}var n=MyWallet.getAllAddresses();j.document.write("<!DOCTYPE html><html><head></head><body><h1>Paper Wallet</h1></body></html>");var m=$("body",j.document);var p=$('<table style="page-break-after:always;"></table>',j.document);m.append(p);var o=0;var l=0;var k=function(){try{var t=n[o];if(!MyWallet.addressExists(t)){return}++o;if(MyWallet.getAddressTag(t)==2){setTimeout(k,10);return}else{if(MyWallet.isWatchOnly(t)){setTimeout(k,10);return}}var s=MyWallet.base58ToSipa(MyWallet.getPrivateKey(t),t);var x=$("<tr></tr>",j.document);var v=$('<td><div style="margin:10px;overflow:hidden"></div></td>',j.document);v.children(":first").qrcode({width:200,height:200,text:s});x.append(v);var u="";if(MyWallet.getAddressLabel(t)){u=MyWallet.getAddressLabel(t)+" - "}var r=$("<td><h3>"+t+"</h3><small><p><b>"+s+"</b></p></small><p>"+u+"Balance "+formatBTC(MyWallet.getAddressBalance(t))+" BTC</p> </td>",j.document);x.append(r);if(MyWallet.getAddressBalance(t)>0){p.prepend(x)}else{p.append(x)}if((l+1)%3==0){p=$('<table style="page-break-after:always;"></table>',j.document);m.append(p)}l++;if(o<n.length){setTimeout(k,10)}}catch(w){MyWallet.makeNotice("error","error-paper",w)}};k()}catch(q){MyWallet.makeNotice("error","error-paper",q)}})})})}this.importJSON=function(m,k,u,q){try{var l=0;if(m==null||m.length==0){throw"No import data provided!"}var o=null;try{o=$.parseJSON(m);if(o==null){throw"null input_text"}}catch(p){MyWallet.decrypt(m,k.main_password,function(v){try{o=$.parseJSON(v);return(o!=null)}catch(w){return false}})}var s=0;var n=function(){try{var v=o.keys[s];var z=v.addr;if(z!=null&&z.length>0&&z!="undefined"){try{if(v.reserve){throw"Ignoring Reserve Key"}var D=v.priv;if(!D){D=v.sec}if(D!=null){if(o.double_encryption){if(k.second_password){var C=MyWallet.decrypt(D,o.sharedKey+k.second_password,MyWallet.isBase58);if(C==null){throw"Error decrypting private key for address "+z}D=C}else{MyWallet.getPassword($("#import-second-password-modal"),function(E){k.second_password=E;ImportExport.importJSON(m,k,u,q)});return}}var A=MyWallet.detectPrivateKeyFormat(D);var B=MyWallet.privateKeyStringToKey(D,A);if(B.getBitcoinAddress().toString()==z||B.getBitcoinAddressCompressed().toString()==z){try{MyWallet.addPrivateKey(B,A=="compsipa")}catch(y){}++l}else{throw"Not importing "+z+" because it is inconsistent with the decoded address "}}if(MyWallet.addressExists(z)){if(v.label&&$.trim(v.label.length)>0){MyWallet.setAddressLabel(z,$.trim(v.label))}if(v.tag){MyWallet.setAddressTag(z,v.tag)}else{if(v.reserve){MyWallet.setAddressTag(z,2)}else{MyWallet.setAddressTag(z,1)}}}}catch(y){console.log(y)}}if(s<o.keys.length-1){++s;setTimeout(n,10);return}if(o.address_book!=null){for(var w=0;w<o.address_book.length;++w){var x=o.address_book[w];if(x.addr&&x.label){MyWallet.addAddressBookEntry(x.addr,x.label)}}}$("#import-input_text").val("");if(l>0){u()}else{throw"No Private Keys Imported. Unknown Format Incorrect Password"}}catch(y){console.log(y);try{q(y)}catch(y){}}};if(o==null){l=c(m);$("#import-input_text").val("");if(l>0){u()}else{throw"No Private Keys Imported. Unknown Format or Incorrect Password"}}else{if(o!=null&&o.keys!=null&&o.keys.length>0){if(o.keys.length>1000){MyWallet.makeNotice("info","keys-skipped","Some keys may have been skipped");var t=0;var r=[];var j=function(){try{for(;t<o.keys.length;++t){var v=o.keys[t];var x=v.addr;if(x==null||x.length==0||x=="undefined"){continue}if(v.reserve||v.tag==2){r.push(v.addr)}if(r.length==1000||(t==o.keys.length-1&&r.length>0)){BlockchainAPI.get_balances(r,function(y){try{for(var A in y){if(y[A].final_balance==0){for(var z=0;z<o.keys.length;++z){var C=o.keys[z].addr;if(C==A){if(o.keys.length>1){o.keys.splice(z,1)}--t}}}}setTimeout(j,10)}catch(B){console.log(B);try{q(B)}catch(B){}}},function(y){console.log(y);try{q(y)}catch(y){}});r=[];return}}}catch(w){console.log(w);try{q(w)}catch(w){}}n()};j()}else{n()}}else{throw"Unknown Format"}}}catch(p){console.log(p);try{q(p)}catch(p){}}};function c(l){var n=l.split(/\W+/g);try{var k=0;for(var m in n){var j=n[m];try{var q=MyWallet.detectPrivateKeyFormat(j);var r=MyWallet.privateKeyStringToKey(j,q);var o=q=="compsipa";try{MyWallet.addPrivateKey(r,o)}catch(p){}++k}catch(p){}}return k}catch(p){MyWallet.makeNotice("error","misc-error",p)}return false}function h(j){MyWallet.getMainPassword(function(k){MyWallet.getSecondPassword(function(l){ImportExport.importJSON(j.val(),{main_password:k,second_password:l},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(m){MyWallet.makeNotice("error","misc-error",m)})})})}function b(l,j){var k=$("#compressed-private-key-modal");k.modal({keyboard:true,backdrop:"static",show:true});k.center();k.find(".btn.btn-secondary").unbind().click(function(){l();k.modal("hide")});k.find(".btn.btn-primary").unbind().click(function(){j();k.modal("hide")})}function g(j){MyWallet.setLoadingText("Importing Backup");MyWallet.securePost("wallet",{method:"get-backup",id:j,format:"json"},function(m){try{var l=m.payload;MyWallet.getMainPassword(function(n){MyWallet.getSecondPassword(function(o){ImportExport.importJSON(l,{main_password:n,second_password:o},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(p){MyWallet.makeNotice("error","misc-error",p)})})})}catch(k){MyWallet.makeNotice("error","misc-error",k)}},function(k){MyWallet.makeNotice("error","misc-error",k.responseText)})}function i(j){MyWallet.setLoadingText("Loading Backup List");MyWallet.securePost("wallet",{method:"list-backups",format:"json"},function(q){try{if(q==null){throw"Failed to get backups"}var l=j.find("table tbody").empty();var n=q.results;if(n.length==0){throw"No backups found"}for(var m in n){var k=n[m];var o=$("<tr><td>"+k.name+"</td><td>"+dateToString(new Date(k.last_modified))+"</td><td>"+k.size+'</td><td><a class="act-import">Import</a></td></tr>');(function(r){o.find(".act-import").click(function(){g(r.id)})})(k);l.append(o)}}catch(p){MyWallet.makeNotice("error","misc-error",p)}},function(k){MyWallet.makeNotice("error","misc-error",k.responseText)})}function a(k,j,l){MyWallet.getSecondPassword(function(){try{if(!k||k.length==0){throw"You must enter a private key to import"}var o=MyWallet.detectPrivateKeyFormat(k);var m=MyWallet.privateKeyStringToKey(k,o);if(o=="compsipa"){var p=m.getBitcoinAddressCompressed().toString();b(function(){if(p==null||p.length==0||p=="undefined"){throw"Unable to decode bitcoin addresses from private key"}if(MyWallet.addPrivateKey(m,true)){if(j&&j.length>0){MyWallet.setAddressLabel(p,j)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(l){l()}MyWallet.makeNotice("success","added","Added Bitcoin Address "+p)}},function(){loadScript("wallet/signer.min.js",function(){var q=m.getBitcoinAddress().toString();BlockchainAPI.get_balance([q],function(r){var s=initNewTx();s.fee=s.base_fee;s.to_addresses.push({address:new Bitcoin.Address(MyWallet.getPreferredAddress()),value:BigInteger.valueOf(r).subtract(s.fee)});s.from_addresses=[q];s.extra_private_keys[q]=B58.encode(m.priv);s.start()},function(){MyWallet.makeNotice("error","misc-error","Error Getting Address Balance")})})})}else{var p=m.getBitcoinAddress().toString();if(p==null||p.length==0||p=="undefined"){throw"Unable to decode bitcoin addresses from private key"}if(MyWallet.addPrivateKey(m,false)){if(j&&j.length>0){MyWallet.setAddressLabel(p,j)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(l){l()}MyWallet.makeNotice("success","added-adress","Added bitcoin address "+p)}else{throw"Unable to add private key for bitcoin address "+p}}}catch(n){MyWallet.makeNotice("error","misc-error","Error importing private key: "+n)}})}}var ImportExport=new _ImportExport();