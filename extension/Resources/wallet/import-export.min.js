function _ImportExport(){this.init=function(i,k,j){MyWallet.setLoadingText("Loading Import Export View");if(!i.is(":empty")){h();k();return}$.ajax({type:"GET",url:root+"wallet/import-export-template",data:{format:"plain"},success:function(l){try{i.html(l);h();k()}catch(m){console.log(m);j()}},error:function(){MyWallet.makeNotice("error","misc-error","Error Downloading Import Export Template");j()}})};function d(i,k){var j=$("#watch-only-modal");j.modal({keyboard:true,backdrop:"static",show:true});j.center();j.find(".address").text(i);j.find(".btn.btn-secondary").unbind().click(function(){j.modal("hide")});j.find(".btn.btn-primary").unbind().click(function(){k();j.modal("hide")})}function h(){$('a[data-toggle="tab"]').unbind().on("show",function(i){$(i.target.hash).trigger("show")});$("#import-json-btn").unbind().click(function(){$(this).prop("disabled",true);f($("#import-json"));$(this).prop("disabled",false)});$("#import-address-btn").unbind().click(function(){var j=$.trim($("#import-address-address").val());if(j.length=0){MyWallet.makeNotice("error","misc-error","You must enter an address to import");return}try{var i=new Bitcoin.Address(j);if(i.toString()!=j){throw"Inconsistency between addresses"}$("#import-address-address").val("");d(j,function(){try{if(MyWallet.addWatchOnlyAddress(j)){MyWallet.makeNotice("success","added-address","Successfully Added Address "+i);try{ws.send('{"op":"addr_sub", "addr":"'+i+'"}')}catch(l){}MyWallet.backupWallet("update",function(){MyWallet.get_history()})}else{throw"Wallet Full Or Addresses Exists"}}catch(l){MyWallet.makeNotice("error","misc-error",l)}})}catch(k){MyWallet.makeNotice("error","misc-error","Error importing address: "+k);return}});$("#import-private-scan").unbind().click(function(){MyWallet.getSecondPassword(function(){loadScript("wallet/signer",function(){showPrivateKeyModal(function(i){if(MyWallet.addPrivateKey(i)){MyWallet.backupWallet("update",function(){MyWallet.get_history()});MyWallet.makeNotice("success","added-address","Imported Bitcoin Address "+i.getBitcoinAddress())}else{throw"Unable to add private key for bitcoin address "+i.getBitcoinAddress()}},function(i){MyWallet.makeNotice("error","misc-error",i)},"Any Private Key")})})});$("#import-private-btn").unbind().click(function(){var i=$("#import-private-key");try{c($.trim(i.val()))}catch(j){MyWallet.makeNotice("error","misc-error","Error importing private key: "+j)}i.val("")});$("#import-brain-wallet-btn").unbind().click(function(){var k=$("#import-brain-wallet");var i=$.trim(k.val());if(i.length<15){MyWallet.makeNotice("error","misc-error","The passphrase must be at least 15 characters long");return}var j=Crypto.SHA256(i,{asBytes:true});try{c(Bitcoin.Base58.encode(j),"Brain Wallet")}catch(l){MyWallet.makeNotice("error","misc-error","Error importing private key: "+l)}k.val("")});$("#export-priv-format").change(function(i){$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))});$("#export-crypted").on("show",function(){$("#json-crypted-export").val(MyWallet.getEncryptedWalletData())});$("#export-unencrypted").on("show",function(){MyWallet.getSecondPassword(function(){$("#export-priv-format").val("base58");$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))})});$("#import-backup").on("show",function(){var i=this;a($(i))});$(".paper-wallet-btn").unbind().click(function(){loadScript("wallet/paper-wallet",function(){PaperWallet.showModal()})})}this.importJSON=function(l,j,t,p){try{var k=0;if(l==null||l.length==0){throw"No import data provided!"}var n=null;try{n=$.parseJSON(l);if(n==null){throw"null input_text"}}catch(o){MyWallet.decrypt(l,j.main_password,MyWallet.getDefaultPbkdf2Iterations(),function(u){try{n=$.parseJSON(u);return(n!=null)}catch(v){return false}})}var r=0;var m=function(){try{var u=n.keys[r];var y=u.addr;if(y!=null&&y.length>0&&y!="undefined"){try{if(u.reserve){throw"Ignoring Reserve Key"}var D=u.priv;if(!D){D=u.sec}if(D!=null){var z=MyWallet.getDefaultPbkdf2Iterations();if(n.options&&n.options.pbkdf2_iterations){z=n.options.pbkdf2_iterations}if(n.double_encryption){if(j.second_password){var C=MyWallet.decrypt(D,n.sharedKey+j.second_password,z,MyWallet.isBase58);if(C==null){throw"Error decrypting private key for address "+y}D=C}else{MyWallet.getPassword($("#import-second-password-modal"),function(E){j.second_password=E;ImportExport.importJSON(l,j,t,p)});return}}var A=MyWallet.detectPrivateKeyFormat(D);var B=MyWallet.privateKeyStringToKey(D,A);if(B.getBitcoinAddress().toString()==y||B.getBitcoinAddressCompressed().toString()==y){try{MyWallet.addPrivateKey(B,A=="compsipa")}catch(x){}++k}else{throw"Not importing "+y+" because it is inconsistent with the decoded address "}}if(MyWallet.addressExists(y)){if(u.label&&$.trim(u.label.length)>0){MyWallet.setAddressLabel(y,$.trim(u.label))}if(u.tag){MyWallet.setAddressTag(y,u.tag)}else{if(u.reserve){MyWallet.setAddressTag(y,2)}else{MyWallet.setAddressTag(y,1)}}}}catch(x){console.log(x)}}if(r<n.keys.length-1){++r;setTimeout(m,10);return}if(n.address_book!=null){for(var v=0;v<n.address_book.length;++v){var w=n.address_book[v];if(w.addr&&w.label){MyWallet.addAddressBookEntry(w.addr,w.label)}}}$("#import-input_text").val("");if(k>0){t()}else{throw"No Private Keys Imported. Unknown Format Incorrect Password"}}catch(x){console.log(x);try{p(x)}catch(x){}}};if(n==null){k=b(l);$("#import-input_text").val("");if(k>0){t()}else{throw"No Private Keys Imported. Unknown Format or Incorrect Password"}}else{if(n!=null&&n.keys!=null&&n.keys.length>0){if(n.keys.length>1000){MyWallet.makeNotice("info","keys-skipped","Some keys may have been skipped");var s=0;var q=[];var i=function(){try{for(;s<n.keys.length;++s){var u=n.keys[s];var w=u.addr;if(w==null||w.length==0||w=="undefined"){continue}if(u.reserve||u.tag==2){q.push(u.addr)}if(q.length==1000||(s==n.keys.length-1&&q.length>0)){BlockchainAPI.get_balances(q,function(x){try{for(var z in x){if(x[z].final_balance==0){for(var y=0;y<n.keys.length;++y){var B=n.keys[y].addr;if(B==z){if(n.keys.length>1){n.keys.splice(y,1)}--s}}}}setTimeout(i,10)}catch(A){console.log(A);try{p(A)}catch(A){}}},function(x){console.log(x);try{p(x)}catch(x){}});q=[];return}}}catch(v){console.log(v);try{p(v)}catch(v){}}m()};i()}else{m()}}else{throw"Unknown Format"}}}catch(o){console.log(o);try{p(o)}catch(o){}}};function b(l){var n=l.split(/\W+/g);try{var k=0;for(var m in n){var j=n[m];try{var q=MyWallet.detectPrivateKeyFormat(j);var r=MyWallet.privateKeyStringToKey(j,q);var o=q=="compsipa";try{MyWallet.addPrivateKey(r,o)}catch(p){}++k}catch(p){}}return k}catch(p){MyWallet.makeNotice("error","misc-error",p)}return false}function f(i){MyWallet.getMainPassword(function(j){MyWallet.getSecondPassword(function(k){ImportExport.importJSON(i.val(),{main_password:j,second_password:k},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(l){MyWallet.makeNotice("error","misc-error",l)})})})}function g(k,i){var j=$("#compressed-private-key-modal");j.modal({keyboard:true,backdrop:"static",show:true});j.center();j.find(".btn.btn-secondary").unbind().click(function(){k();j.modal("hide")});j.find(".btn.btn-primary").unbind().click(function(){i();j.modal("hide")})}function e(i){MyWallet.setLoadingText("Importing Backup");MyWallet.securePost("wallet",{method:"get-backup",id:i,format:"json"},function(l){try{var k=l.payload;MyWallet.getMainPassword(function(m){MyWallet.getSecondPassword(function(n){ImportExport.importJSON(k,{main_password:m,second_password:n},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(o){MyWallet.makeNotice("error","misc-error",o)})})})}catch(j){MyWallet.makeNotice("error","misc-error",j)}},function(j){MyWallet.makeNotice("error","misc-error",j.responseText)})}function a(i){MyWallet.setLoadingText("Loading Backup List");MyWallet.securePost("wallet",{method:"list-backups",format:"json"},function(p){try{if(p==null){throw"Failed to get backups"}var k=i.find("table tbody").empty();var m=p.results;if(m.length==0){throw"No backups found"}for(var l in m){var j=m[l];var n=$("<tr><td>"+j.name+"</td><td>"+dateToString(new Date(j.last_modified))+"</td><td>"+j.size+'</td><td><a class="act-import">Import</a></td></tr>');(function(q){n.find(".act-import").click(function(){e(q.id)})})(j);k.append(n)}}catch(o){MyWallet.makeNotice("error","misc-error",o)}},function(j){MyWallet.makeNotice("error","misc-error",j.responseText)})}function c(j,i,k){MyWallet.getSecondPassword(function(){try{if(!j||j.length==0){throw"You must enter a private key to import"}var n=MyWallet.detectPrivateKeyFormat(j);var l=MyWallet.privateKeyStringToKey(j,n);if(n=="compsipa"){var o=l.getBitcoinAddressCompressed().toString();g(function(){if(o==null||o.length==0||o=="undefined"){throw"Unable to decode bitcoin addresses from private key"}if(MyWallet.addPrivateKey(l,true)){if(i&&i.length>0){MyWallet.setAddressLabel(o,i)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(k){k()}MyWallet.makeNotice("success","added","Added Bitcoin Address "+o)}},function(){loadScript("wallet/signer",function(){var p=l.getBitcoinAddress().toString();BlockchainAPI.get_balance([p],function(q){var r=initNewTx();r.fee=r.base_fee;r.to_addresses.push({address:new Bitcoin.Address(MyWallet.getPreferredAddress()),value:BigInteger.valueOf(q).subtract(r.fee)});r.from_addresses=[p];r.extra_private_keys[p]=B58.encode(l.priv);r.start()},function(){MyWallet.makeNotice("error","misc-error","Error Getting Address Balance")})})})}else{var o=l.getBitcoinAddress().toString();if(o==null||o.length==0||o=="undefined"){throw"Unable to decode bitcoin addresses from private key"}if(MyWallet.addPrivateKey(l,false)){if(i&&i.length>0){MyWallet.setAddressLabel(o,i)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(k){k()}MyWallet.makeNotice("success","added-adress","Added bitcoin address "+o)}else{throw"Unable to add private key for bitcoin address "+o}}}catch(m){MyWallet.makeNotice("error","misc-error","Error importing private key: "+m)}})}}var ImportExport=new _ImportExport();